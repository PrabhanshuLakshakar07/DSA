/* Q -> Given an integer x, return true if x is a palindrome, and false otherwise.
Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.

solve ex. 121
Function Call     	start	  end	   s[start]	   s[end]	       Action
helper("121",0,2)  	0	       2	       '1'	      '1'   	waiting for return
helper("121",1,1)	  1	       1        	'2'	        '2'   	check base case

start >= end → base case → return true */



// code Kotlin 


fun isPalindrome(x: Int): Boolean {
    if (x < 0) return false // Negative numbers are not palindrome

    val str = x.toString()  // convert to string 

    fun helper(s: String, start: Int, end: Int): Boolean {
        if (start >= end) return true
        if (s[start] != s[end]) return false
        return helper(s, start + 1, end - 1)
    }

    return helper(str, 0, str.length - 1)
}

fun main() {
    println(isPalindrome(121))      // true
    println(isPalindrome(-121))     // false
    println(isPalindrome(10))       // false
    println(isPalindrome(12321))    // true
    println(isPalindrome(1000021))  // false
}
