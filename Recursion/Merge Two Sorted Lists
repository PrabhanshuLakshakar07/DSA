Q-> You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.
EX
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

solve recursion --> // yese solve hoga 

1(list1) → merge(2→4 , 1→3→4)
1(list1) → 1(list2) → merge(2→4 , 3→4)
1(list1) → 1(list2) → 2 → merge(4 , 3→4)
1 → 1 → 2 → 3 → merge(4 , 4)
1 → 1 → 2 → 3 → 4(list1) → merge(null , 4(list2))
1 → 1 → 2 → 3 → 4 → 4  

Final: 1 → 1 → 2 → 3 → 4 → 4

//ye recursive ke liye h 

class ListNode(var `val`: Int) {
    var next: ListNode? = null
}

class Solution {
    fun mergeTwoLists(list1: ListNode?, list2: ListNode?): ListNode? {
        if (list1 == null) return list2
        if (list2 == null) return list1

        return if (list1.`val` <= list2.`val`) {
            list1.next = mergeTwoLists(list1.next, list2)
            list1
        } else {
            list2.next = mergeTwoLists(list1, list2.next)
            list2
        }
    }
}



ye iteration se solve h for time complexity or space complexity 
class ListNode(var `val`: Int) {
    var next: ListNode? = null
}

class Solution {
    fun mergeTwoLists(list1: ListNode?, list2: ListNode?): ListNode? {
        val dummy = ListNode(0)       // Dummy node to simplify merging
        var tail = dummy
        var l1 = list1
        var l2 = list2

        while (l1 != null && l2 != null) {
            if (l1.`val` <= l2.`val`) {
                tail.next = l1
                l1 = l1.next
            } else {
                tail.next = l2
                l2 = l2.next
            }
            tail = tail.next!!
        }

        tail.next = l1 ?: l2           // Attach remaining nodes
        return dummy.next
    }
}
